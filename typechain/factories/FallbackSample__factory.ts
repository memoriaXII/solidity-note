/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { FallbackSample } from "../FallbackSample";

export class FallbackSample__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FallbackSample> {
    return super.deploy(overrides || {}) as Promise<FallbackSample>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FallbackSample {
    return super.attach(address) as FallbackSample;
  }
  connect(signer: Signer): FallbackSample__factory {
    return super.connect(signer) as FallbackSample__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FallbackSample {
    return new Contract(address, _abi, signerOrProvider) as FallbackSample;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "receiveMoney",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdrawMoney",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610695806100206000396000f3fe6080604052600436106100385760003560e01c806327e235e31461004c5780636d26ec1814610089578063f274c8971461009357610047565b36610047576100456100bc565b005b600080fd5b34801561005857600080fd5b50610073600480360381019061006e9190610407565b6101d1565b60405161008091906104be565b60405180910390f35b6100916100bc565b005b34801561009f57600080fd5b506100ba60048036038101906100b59190610430565b6101e9565b005b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461014591906104ea565b101561017a577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546101c891906104ea565b92505081905550565b60006020528060005260406000206000915090505481565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111561026a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102619061049e565b60405180910390fd5b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546102b49190610540565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610328577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103769190610540565b925050819055508173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156103c3573d6000803e3d6000fd5b505050565b6000813590506103d78161061a565b92915050565b6000813590506103ec81610631565b92915050565b60008135905061040181610648565b92915050565b60006020828403121561041957600080fd5b6000610427848285016103c8565b91505092915050565b6000806040838503121561044357600080fd5b6000610451858286016103dd565b9250506020610462858286016103f2565b9150509250929050565b60006104796011836104d9565b9150610484826105f1565b602082019050919050565b610498816105b8565b82525050565b600060208201905081810360008301526104b78161046c565b9050919050565b60006020820190506104d3600083018461048f565b92915050565b600082825260208201905092915050565b60006104f5826105b8565b9150610500836105b8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610535576105346105c2565b5b828201905092915050565b600061054b826105b8565b9150610556836105b8565b925082821015610569576105686105c2565b5b828203905092915050565b600061057f82610598565b9050919050565b600061059182610598565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f6e6f7420656e6f7567682066756e64732e000000000000000000000000000000600082015250565b61062381610574565b811461062e57600080fd5b50565b61063a81610586565b811461064557600080fd5b50565b610651816105b8565b811461065c57600080fd5b5056fea26469706673582212206c28320dd2e9d9feba3deac81cedb54940d27071aaba792f86f423d511d0dd6264736f6c63430008030033";
